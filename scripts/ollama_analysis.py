#!/usr/bin/env python3
"""
Ollama-Powered Code Analysis Script
====================================

Uses Ollama Cloud service to analyze GrumpiMiner codebase and generate insights.
"""

import argparse
import sys
import os
from pathlib import Path
from datetime import datetime

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from grumpi_miner.ollama_client import create_client


def analyze_codebase(client, model: str, analysis_type: str) -> str:
    """Perform codebase analysis using Ollama"""
    # Read source files
    source_files = []
    grumpi_dir = Path(__file__).parent.parent / "grumpi_miner"
    
    for py_file in grumpi_dir.glob("*.py"):
        if py_file.name != "__init__.py":
            with open(py_file, "r") as f:
                source_files.append({
                    "name": py_file.name,
                    "content": f.read()[:2000]  # Limit to first 2000 chars
                })
    
    # Construct system prompt
    system_prompt = f"You are an expert code analyst analyzing the GrumpiMiner testing framework. Focus on {analysis_type} analysis."
    
    # Create summary
    files_summary = "\n\n".join([
        f"## {f['name']}\n```python\n{f['content']}\n```"
        for f in source_files[:5]  # Limit to 5 files
    ])
    
    prompt = f"Analyze this code and provide insights:\n\n{files_summary}"
    
    # Generate analysis
    response = client.generate(
        model=model,
        prompt=prompt,
        system=system_prompt,
        options={"temperature": 0.3}
    )
    
    return response.content


def generate_report(analysis_content: str, model: str, analysis_type: str) -> str:
    """Generate formatted markdown report"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    return f"""# GrumpiMiner Analysis Report

**Generated:** {timestamp}
**Model:** {model}
**Type:** {analysis_type}

---

{analysis_content}

---

*Auto-generated by Ollama Cloud service*
"""


def main():
    parser = argparse.ArgumentParser(description="Analyze GrumpiMiner with Ollama")
    parser.add_argument("--model", default="llama3.2:3b")
    parser.add_argument("--analysis-type", default="comprehensive")
    parser.add_argument("--output", default="docs/analysis-report.md")
    
    args = parser.parse_args()
    
    try:
        client = create_client()
        print(f"üîç Starting analysis with {args.model}...")
        
        analysis_content = analyze_codebase(client, args.model, args.analysis_type)
        report = generate_report(analysis_content, args.model, args.analysis_type)
        
        Path(args.output).parent.mkdir(parents=True, exist_ok=True)
        with open(args.output, "w") as f:
            f.write(report)
        
        print(f"‚úÖ Report saved to: {args.output}")
        return 0
    except Exception as e:
        print(f"‚ùå Failed: {e}", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(main())
